// generated by jsonenums -type=UnaryOp; DO NOT EDIT

package ast

import (
	"encoding/json"
	"fmt"
)

var (
	_UnaryOpNameToValue = map[string]UnaryOp{
		"UopNot":        UopNot,
		"UopBitwiseNot": UopBitwiseNot,
		"UopPlus":       UopPlus,
		"UopMinus":      UopMinus,
	}

	_UnaryOpValueToName = map[UnaryOp]string{
		UopNot:        "UopNot",
		UopBitwiseNot: "UopBitwiseNot",
		UopPlus:       "UopPlus",
		UopMinus:      "UopMinus",
	}
)

func init() {
	var v UnaryOp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UnaryOpNameToValue = map[string]UnaryOp{
			interface{}(UopNot).(fmt.Stringer).String():        UopNot,
			interface{}(UopBitwiseNot).(fmt.Stringer).String(): UopBitwiseNot,
			interface{}(UopPlus).(fmt.Stringer).String():       UopPlus,
			interface{}(UopMinus).(fmt.Stringer).String():      UopMinus,
		}
	}
}

// MarshalJSON is generated so UnaryOp satisfies json.Marshaler.
func (r UnaryOp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UnaryOpValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid UnaryOp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so UnaryOp satisfies json.Unmarshaler.
func (r *UnaryOp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UnaryOp should be a string, got %s", data)
	}
	v, ok := _UnaryOpNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid UnaryOp %q", s)
	}
	*r = v
	return nil
}
