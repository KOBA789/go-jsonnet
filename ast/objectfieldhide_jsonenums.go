// generated by jsonenums -type=ObjectFieldHide; DO NOT EDIT

package ast

import (
	"encoding/json"
	"fmt"
)

var (
	_ObjectFieldHideNameToValue = map[string]ObjectFieldHide{
		"ObjectFieldHidden":  ObjectFieldHidden,
		"ObjectFieldInherit": ObjectFieldInherit,
		"ObjectFieldVisible": ObjectFieldVisible,
	}

	_ObjectFieldHideValueToName = map[ObjectFieldHide]string{
		ObjectFieldHidden:  "ObjectFieldHidden",
		ObjectFieldInherit: "ObjectFieldInherit",
		ObjectFieldVisible: "ObjectFieldVisible",
	}
)

func init() {
	var v ObjectFieldHide
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ObjectFieldHideNameToValue = map[string]ObjectFieldHide{
			interface{}(ObjectFieldHidden).(fmt.Stringer).String():  ObjectFieldHidden,
			interface{}(ObjectFieldInherit).(fmt.Stringer).String(): ObjectFieldInherit,
			interface{}(ObjectFieldVisible).(fmt.Stringer).String(): ObjectFieldVisible,
		}
	}
}

// MarshalJSON is generated so ObjectFieldHide satisfies json.Marshaler.
func (r ObjectFieldHide) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ObjectFieldHideValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ObjectFieldHide: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ObjectFieldHide satisfies json.Unmarshaler.
func (r *ObjectFieldHide) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ObjectFieldHide should be a string, got %s", data)
	}
	v, ok := _ObjectFieldHideNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ObjectFieldHide %q", s)
	}
	*r = v
	return nil
}
