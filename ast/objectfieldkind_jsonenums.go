// generated by jsonenums -type=ObjectFieldKind; DO NOT EDIT

package ast

import (
	"encoding/json"
	"fmt"
)

var (
	_ObjectFieldKindNameToValue = map[string]ObjectFieldKind{
		"ObjectAssert":    ObjectAssert,
		"ObjectFieldID":   ObjectFieldID,
		"ObjectFieldExpr": ObjectFieldExpr,
		"ObjectFieldStr":  ObjectFieldStr,
		"ObjectLocal":     ObjectLocal,
		"ObjectNullID":    ObjectNullID,
		"ObjectNullExpr":  ObjectNullExpr,
		"ObjectNullStr":   ObjectNullStr,
	}

	_ObjectFieldKindValueToName = map[ObjectFieldKind]string{
		ObjectAssert:    "ObjectAssert",
		ObjectFieldID:   "ObjectFieldID",
		ObjectFieldExpr: "ObjectFieldExpr",
		ObjectFieldStr:  "ObjectFieldStr",
		ObjectLocal:     "ObjectLocal",
		ObjectNullID:    "ObjectNullID",
		ObjectNullExpr:  "ObjectNullExpr",
		ObjectNullStr:   "ObjectNullStr",
	}
)

func init() {
	var v ObjectFieldKind
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ObjectFieldKindNameToValue = map[string]ObjectFieldKind{
			interface{}(ObjectAssert).(fmt.Stringer).String():    ObjectAssert,
			interface{}(ObjectFieldID).(fmt.Stringer).String():   ObjectFieldID,
			interface{}(ObjectFieldExpr).(fmt.Stringer).String(): ObjectFieldExpr,
			interface{}(ObjectFieldStr).(fmt.Stringer).String():  ObjectFieldStr,
			interface{}(ObjectLocal).(fmt.Stringer).String():     ObjectLocal,
			interface{}(ObjectNullID).(fmt.Stringer).String():    ObjectNullID,
			interface{}(ObjectNullExpr).(fmt.Stringer).String():  ObjectNullExpr,
			interface{}(ObjectNullStr).(fmt.Stringer).String():   ObjectNullStr,
		}
	}
}

// MarshalJSON is generated so ObjectFieldKind satisfies json.Marshaler.
func (r ObjectFieldKind) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ObjectFieldKindValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ObjectFieldKind: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ObjectFieldKind satisfies json.Unmarshaler.
func (r *ObjectFieldKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ObjectFieldKind should be a string, got %s", data)
	}
	v, ok := _ObjectFieldKindNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ObjectFieldKind %q", s)
	}
	*r = v
	return nil
}
