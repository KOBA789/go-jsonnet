// generated by jsonenums -type=LiteralStringKind; DO NOT EDIT

package ast

import (
	"encoding/json"
	"fmt"
)

var (
	_LiteralStringKindNameToValue = map[string]LiteralStringKind{
		"StringSingle":         StringSingle,
		"StringDouble":         StringDouble,
		"StringBlock":          StringBlock,
		"VerbatimStringDouble": VerbatimStringDouble,
		"VerbatimStringSingle": VerbatimStringSingle,
	}

	_LiteralStringKindValueToName = map[LiteralStringKind]string{
		StringSingle:         "StringSingle",
		StringDouble:         "StringDouble",
		StringBlock:          "StringBlock",
		VerbatimStringDouble: "VerbatimStringDouble",
		VerbatimStringSingle: "VerbatimStringSingle",
	}
)

func init() {
	var v LiteralStringKind
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LiteralStringKindNameToValue = map[string]LiteralStringKind{
			interface{}(StringSingle).(fmt.Stringer).String():         StringSingle,
			interface{}(StringDouble).(fmt.Stringer).String():         StringDouble,
			interface{}(StringBlock).(fmt.Stringer).String():          StringBlock,
			interface{}(VerbatimStringDouble).(fmt.Stringer).String(): VerbatimStringDouble,
			interface{}(VerbatimStringSingle).(fmt.Stringer).String(): VerbatimStringSingle,
		}
	}
}

// MarshalJSON is generated so LiteralStringKind satisfies json.Marshaler.
func (r LiteralStringKind) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LiteralStringKindValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid LiteralStringKind: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so LiteralStringKind satisfies json.Unmarshaler.
func (r *LiteralStringKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LiteralStringKind should be a string, got %s", data)
	}
	v, ok := _LiteralStringKindNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid LiteralStringKind %q", s)
	}
	*r = v
	return nil
}
